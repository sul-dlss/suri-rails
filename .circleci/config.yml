# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1
parameters:
  ruby-version:
    type: string
    default: "3.0.3"
  postgres-version:
    type: string
    default: "11.13"
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: suldlss/suri-rails
    docker:
    - image: cimg/base
jobs:
  test:
    docker:
      - image: 'cimg/ruby:<< pipeline.parameters.ruby-version >>-node'
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: circleci-demo-ruby
          PGPASSWORD: sekret
          RAILS_ENV: test
          NOKOGIRI_USE_SYSTEM_LIBRARIES: true
      - image: 'cimg/postgres:<< pipeline.parameters.postgres-version >>'
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: suri
          POSTGRES_PASSWORD: sekret

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Validate API specification
          command: |
            sudo npm install -g openapi-enforcer-cli
            result=$(openapi-enforcer validate openapi.yml)
            [[ $result =~ "Document is valid" ]] && {
            echo "Validation good"
            exit 0
            } || {
            echo $result
            exit 1
            }

      - run:
          name: Install/Upgrade bundler
          command: gem install bundler -v 2.3.4

      - run:
          name: Which bundler?
          command: bundle -v

      - run:
          name: Install dependencies
          command: bundle check || bundle install

      - run:
          name: Run code linter & style checker
          command: bundle exec rubocop

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Set up database
          command: bin/rails db:test:prepare

      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build

      - run:
          name: rspec
          command: bundle exec rspec

      - run:
          name: upload test coverage report to Code Climate
          command: ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?

  build-image:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: |
            docker save -o app_image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./app_image.tar
  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: |
            docker load -i /tmp/workspace/app_image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $IMAGE_NAME:latest
  publish-tag:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: |
            docker load -i /tmp/workspace/app_image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CIRCLE_TAG
            docker push $IMAGE_NAME:$CIRCLE_TAG

workflows:
  version: 2

  test:
    jobs:
    - test

  build:
    jobs:
    - build-image:
        filters:
          branches:
            only: master
    - publish-latest:
        requires:
          - build-image
        filters:
          branches:
            only: master
  build-tags:
    jobs:
    - build-image:
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
    - publish-tag:
        requires:
          - build-image
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
